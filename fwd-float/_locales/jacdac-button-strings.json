{
    "jacdac.ButtonEvent.Down": "Emitted when button goes from inactive to active.",
    "jacdac.ButtonEvent.Down|block": "raised",
    "jacdac.ButtonEvent.Hold": "Argument: time ms uint32_t. Emitted when the press time is greater than 500ms, and then at least every 500ms\nas long as the button remains pressed. The 'time' parameter records the the amount of time\nthat the button has been held (since the down event).\n* ```\nconst [time] = jdunpack<[number]>(buf, \"u32\")\n```",
    "jacdac.ButtonEvent.Hold|block": "hold",
    "jacdac.ButtonEvent.Up": "Argument: time ms uint32_t. Emitted when button goes from active to inactive. The 'time' parameter\nrecords the amount of time between the down and up events.\n* ```\nconst [time] = jdunpack<[number]>(buf, \"u32\")\n```",
    "jacdac.ButtonEvent.Up|block": "up",
    "jacdac.ButtonReg.Analog": "Constant bool (uint8_t). Indicates if the button provides analog `pressure` readings.\n* ```\nconst [analog] = jdunpack<[number]>(buf, \"u8\")\n```",
    "jacdac.ButtonReg.Pressed": "Read-only bool (uint8_t). Determines if the button is pressed currently.",
    "jacdac.ButtonReg.Pressure": "Read-only ratio u0.16 (uint16_t). Indicates the pressure state of the button, where `0` is open.\n* ```\nconst [pressure] = jdunpack<[number]>(buf, \"u0.16\")\n```",
    "modules.ButtonClient.holdDuration|block": "%button hold duration (ms)",
    "modules.ButtonClient.onEvent|block": "on %button %event",
    "modules.ButtonClient.pressed|block": "%button pressed",
    "modules.button1|block": "button1",
    "modules.button2|block": "button2",
    "modules.button3|block": "button3",
    "modules.button4|block": "button4",
    "modules|block": "modules",
    "{id:category}Jacdac": "Jacdac",
    "{id:category}Modules": "Modules",
    "{id:group}Button": "Button"
  }